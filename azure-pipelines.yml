
# trigger:
#   branches:
#     include:
#       - main
# trigger: none
# pool:
#   name: Default

# variables:
#   system.debug: true
#   liquibaseImage: liquibase/liquibase:4.30
#   changelogDir: $(Build.SourcesDirectory)/changelog
#   changelogDirTemp: $(Build.SourcesDirectory)/changelog
#   githubRepo: reddyaravind/liquibase  # Replace with your GitHub repository
#   githubToken: $(GITHUB_TOKEN)  # Securely store this in Azure Pipeline Secrets

# jobs:
#   - job: GenerateAndApplyChangelog
#     displayName: 'Generate Diff Changelog and Apply to Production'

#     steps:
#       # Step 1: Set up changelog directory
#       - script: |
#           echo "Setting up changelog directory..."
#           mkdir -p $(changelogDir)
#           chmod -R 777 $(changelogDir)
#           mkdir -p $(Build.SourcesDirectory)/repo_temp
#           chmod -R 777 $(Build.SourcesDirectory)/repo_temp
#         displayName: 'Setup Changelog Directory'

#       # Step 2: Generate Diff Changelog
#       - script: |
#           echo "Generating Diff Changelog..."
#           docker run --rm \
#             -v $(changelogDir):/liquibase/changelog \
#             $(liquibaseImage) \
#             --referenceUrl="jdbc:postgresql://autorack.proxy.rlwy.net:49636/railway" \
#             --referenceUsername="postgres" \
#             --referencePassword="GZDBIhCHoSVWPWZItUljvujWXVhGSXvT" \
#             --url="jdbc:postgresql://autorack.proxy.rlwy.net:36995/railway" \
#             --username="postgres" \
#             --password="aLkrIZQQYUNOjtnGXOCuKNIVffealEqJ" \
#             --changeLogFile="/liquibase/changelog/changelog_$(Build.BuildId).xml" \
#             diffChangeLog
#           echo "Generated changelog_$(Build.BuildId).xml:"
#           cat $(changelogDir)/changelog_$(Build.BuildId).xml || echo "changelog.xml not found!"
#         displayName: 'Generate and Print Diff Changelog'

#       # Step 3: Push Changelog to Repository
#       - script: |
#           echo "Configuring Git to push changelog.xml..."
#           git config --global user.name "reddyaravind"
#           git config --global user.email "reddyaravind838@gmail.com"

#           echo "Cloning the repository..."
#           git clone https://github.com/reddyaravind/liquibase.git repo
#           cd repo

#           echo "Checking out the main branch..."
#           git checkout main || git checkout -b main  # Ensure you're on the main branch, create it if it doesn't exist

#           echo "Copying changelog.xml to the repository..."
#           cp $(changelogDir)/changelog_$(Build.BuildId).xml changelog/changelog_$(Build.BuildId).xml

#           echo "Adding changelog.xml to the repository..."
#           git add changelog/changelog_$(Build.BuildId).xml

#           echo "Committing the changes..."
#           git commit -m "Build ID: $(Build.BuildId)"

#           echo "Pushing the changes to the repository..."
#           git push https://$(GIT_TOKEN)@github.com/reddyaravind/liquibase.git main || exit 1

#           echo "Changelog successfully pushed to the repository."
#         displayName: 'Push Changelog to Repository'

#       # Step 4: Clone repository to fetch changelog.xml for applying to production
#       - script: |
#           echo "Cloning the repository to fetch changelog.xml..."
#           git clone https://github.com/reddyaravind/liquibase.git repo_temp
#           cd repo_temp
#           cd changelog
#           echo "Printing fetched changelog.xml:"
#           cat changelog_$(Build.BuildId).xml || echo "changelog_$(Build.BuildId).xml not found!"
#           echo changelog_$(Build.BuildId).xml > $(Build.SourcesDirectory)/repo_temp/changelog_$(Build.BuildId).xml
#         displayName: 'Fetch and Print Changelog for Production'

#       # Step 5: Apply Changelog to Production Database
#       - script: |
#           echo "Applying Liquibase Changelog to production database..."
#           docker run --rm \
#             -v $(Build.SourcesDirectory)/changelog:/liquibase/changelog \
#             $(liquibaseImage) \
#             --url="jdbc:postgresql://autorack.proxy.rlwy.net:36995/railway" \
#             --username="postgres" \
#             --password="aLkrIZQQYUNOjtnGXOCuKNIVffealEqJ" \
#             --changeLogFile="changelog/changelog_$(Build.BuildId).xml" \
#             update || exit 1
#           echo "Liquibase update applied successfully to production database."
#         displayName: 'Apply Changelog to Production'













# trigger: none

# pool:
#   name: Default

# variables:
#   system.debug: true
#   liquibaseImage: liquibase/liquibase:4.30
#   changelogDir: $(Build.SourcesDirectory)/changelog
#   githubRepo: reddyaravind/liquibase  # Replace with your GitHub repository
#   githubToken: $(GIT_TOKEN)       # Securely store this in Azure Pipeline Secrets
#   stagingPassword: $(STAGING_PASSWORD)

# jobs:
#   - job: GenerateAndApplyChangelog
#     displayName: 'Generate Diff Changelog and Apply to Production'

#     steps:
#       # Step 1: Set up changelog directory
#       - script: |
#           echo "Setting up changelog directory..."
#           mkdir -p $(changelogDir)
#           chmod -R 777 $(changelogDir)
#         displayName: 'Setup Changelog Directory'

#       # Step 2: Generate Diff Changelog
#       - script: |
#           echo "Generating Diff Changelog..."
#           docker run --rm \
#             -v $(changelogDir):/liquibase/changelog \
#             $(liquibaseImage) \
#             --referenceUrl=$(STAGING_URL) \
#             --referenceUsername="postgres" \
#             --referencePassword=$(STAGING_PASSWORD) \
#             --url=$(PROD_URL) \
#             --username="postgres" \
#             --password=$(PROD_PASSWORD) \
#             --changeLogFile="/liquibase/changelog/changelog_$(Build.BuildId).xml" \
#             diffChangeLog
#           echo "Generated changelog_$(Build.BuildId).xml:"
#           cat $(changelogDir)/changelog_$(Build.BuildId).xml || echo "changelog.xml not found!"
#         displayName: 'Generate and Print Diff Changelog'

#       # Step 3: Push Changelog to Repository
#       - script: |
#           echo "Configuring Git..."
#           git config --global user.name "reddyaravind"
#           git config --global user.email "reddyaravind838@gmail.com"

#           echo "Cloning the repository..."
#           git clone https://$(GITHUB_TOKEN)@github.com/reddyaravind/liquibase.git repo
#           cd repo

#           echo "Checking out or creating the changelog branch..."
#           if git show-ref --verify --quiet refs/heads/main; then
#               echo "Branch 'main' exists locally."
#               git checkout main
#           else
#               echo "Branch 'main' does not exist. Creating..."
#               git checkout -b main
#           fi

#           echo "Copying the generated changelog file..."
#           mkdir -p changelog
#           cp $(changelogDir)/changelog_$(Build.BuildId).xml changelog/

#           echo "Adding the changelog to the repository..."
#           git add changelog/changelog_$(Build.BuildId).xml

#           echo "Committing the changes..."
#           git commit -m "Adding diff changelog for Build ID: $(Build.BuildId) [skip ci]" || echo "No changes to commit."

#           echo "Pushing the changes to the 'main' branch..."
#           git push --set-upstream https://$(GIT_TOKEN)@github.com/reddyaravind/liquibase.git main
#           echo "Changelog successfully pushed to the 'main' branch."
#         displayName: 'Push Changelog to Repository'

#       # Step 4: Fetch Changelog for Applying to Production
#       - script: |
#           echo "Cloning the repository to fetch changelog.xml..."
#           git clone https://$(GIT_TOKEN)@github.com/reddyaravind/liquibase.git repo_temp
#           cd repo_temp
#           cd changelog
#           echo "Printing fetched changelog.xml:"
#           cat changelog_$(Build.BuildId).xml || echo "changelog_$(Build.BuildId).xml not found!"
#         displayName: 'Fetch and Print Changelog for Production'

#       # Step 5: Apply Changelog to Production Database
#       - script: |
#           echo "Applying Liquibase Changelog to production database..."
#           docker run --rm \
#             -v $(Build.SourcesDirectory)/changelog:/liquibase/changelog \
#             $(liquibaseImage) \
#             --url=$(PROD_URL) \
#             --username="postgres" \
#             --password=$(PROD_PASSWORD) \
#             --changeLogFile="changelog/changelog_$(Build.BuildId).xml" \
#             update || exit 1
#           echo "Liquibase update applied successfully to production database."
#         displayName: 'Apply Changelog to Production'



















trigger: none

pool:
  name: Default

variables:
  system.debug: true
  liquibaseImage: liquibase/liquibase:4.30
  changelogDir: $(Build.SourcesDirectory)/changelog
  githubRepo: reddyaravind/liquibase  # Replace with your GitHub repository
  githubToken: $(GIT_TOKEN)       # Securely store this in Azure Pipeline Secrets
  stagingPassword: $(STAGING_PASSWORD)

jobs:
  - job: GenerateAndApplyChangelog
    displayName: 'Generate Diff Changelog and Apply to Production'

    steps:
      # Step 1: Download Secure File
      - task: DownloadSecureFile@1
        name: DownloadMySecureFile
        inputs:
          secureFile: 'root_ca.pem'


      # Step 1: Set up changelog directory
      - script: |
          echo "Setting up changelog directory..."
          mkdir -p $(changelogDir)
          chmod -R 777 $(changelogDir)
        displayName: 'Setup Changelog Directory'

      # Step 2: Generate Diff Changelog
      - script: |
          echo "Generating Diff Changelog..."
          docker run --rm \
            -v $(changelogDir):/liquibase/changelog \
            $(liquibaseImage) \
            --referenceUrl="jdbc:postgresql://maglev.proxy.rlwy.net:57924/railway" \
            --referenceUsername="postgres" \
            --referencePassword="CWeTDoXHIEFQDzZPqEAdmrIqtybWpfOc" \
            --url="jdbc:postgresql://dart-testing-db-server.postgres.database.azure.com:5432/postgres?sslmode=require&sslrootcert=$(Pipeline.Workspace)/root_ca.pem" \
            --username="Aravind.Reddy@donyati.com" \
            --password="$(az account get-access-token --resource https://ossrdbms-aad.database.windows.net --query accessToken --output tsv)" \
            --changeLogFile="/liquibase/changelog/changelog_$(Build.BuildId).xml" \
            diffChangeLog
          echo "Generated changelog_$(Build.BuildId).xml:"
          cat $(changelogDir)/changelog_$(Build.BuildId).xml || echo "changelog.xml not found!"
        displayName: 'Generate and Print Diff Changelog'

      # Step 3: Push Changelog to Repository
      - script: |
          echo "Configuring Git..."
          git config --global user.name "reddyaravind"
          git config --global user.email "reddyaravind838@gmail.com"

          echo "Cloning the repository..."
          git clone https://$(GITHUB_TOKEN)@github.com/reddyaravind/liquibase.git repo
          cd repo

          echo "Checking out or creating the changelog branch..."
          if git show-ref --verify --quiet refs/heads/main; then
              echo "Branch 'main' exists locally."
              git checkout main
          else
              echo "Branch 'main' does not exist. Creating..."
              git checkout -b main
          fi

          echo "Copying the generated changelog file..."
          mkdir -p changelog
          cp $(changelogDir)/changelog_$(Build.BuildId).xml changelog/

          echo "Adding the changelog to the repository..."
          git add changelog/changelog_$(Build.BuildId).xml

          echo "Committing the changes..."
          git commit -m "Adding diff changelog for Build ID: $(Build.BuildId) [skip ci]" || echo "No changes to commit."

          echo "Pushing the changes to the 'main' branch..."
          git push --set-upstream https://$(GIT_TOKEN)@github.com/reddyaravind/liquibase.git main
          echo "Changelog successfully pushed to the 'main' branch."
        displayName: 'Push Changelog to Repository'

      # Step 4: Fetch Changelog for Applying to Production
      - script: |
          echo "Cloning the repository to fetch changelog.xml..."
          git clone https://$(GIT_TOKEN)@github.com/reddyaravind/liquibase.git repo_temp
          cd repo_temp
          cd changelog
          echo "Printing fetched changelog.xml:"
          cat changelog_$(Build.BuildId).xml || echo "changelog_$(Build.BuildId).xml not found!"
        displayName: 'Fetch and Print Changelog for Production'

      # Step 5: Apply Changelog to Production Database
      - script: |
          echo "Applying Liquibase Changelog to production database..."
          docker run --rm \
            -v $(Build.SourcesDirectory)/changelog:/liquibase/changelog \
            $(liquibaseImage) \
            --url="jdbc:postgresql://dart-testing-db-server.postgres.database.azure.com:5432/postgres?sslmode=require&sslrootcert=$(Pipeline.Workspace)/root_ca.pem" \
            --username="Aravind.Reddy@donyati.com" \
            --password="$(az account get-access-token --resource https://ossrdbms-aad.database.windows.net --query accessToken --output tsv)" \
            --changeLogFile="changelog/changelog_$(Build.BuildId).xml" \
            update || exit 1
          echo "Liquibase update applied successfully to production database."
        displayName: 'Apply Changelog to Production'
