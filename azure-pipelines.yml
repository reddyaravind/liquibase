# trigger:
#   branches:
#     include:
#       - main  # Define your branch trigger (you can specify any branch)


# pool:
#   name: Default  # Your agent pool name
#   demands:
#     - agent.name -equals DART  # Ensure it uses the DART agent
# jobs:
#   - job: Liquibase
#     displayName: 'Run Liquibase Changes'
#     pool:
#       vmImage: 'ubuntu-latest'

#     steps:
#       - task: Checkout@1
#         displayName: 'Checkout repository'
        
#       - script: |
#           echo "Setting up Liquibase..."
#           mkdir -p $(changelogDir)
#         displayName: 'Setup changelog directory'

#       # Step 1: Generate Liquibase Changelog Diff (between two databases)
#       - script: |
#           echo "Running Liquibase to generate Diff Changelog..."
#           docker run --rm \
#             -v $(changelogDir):/liquibase/changelog \
#             $(liquibaseImage) \
#             --referenceUrl="jdbc:postgresql://junction.proxy.rlwy.net:38704/railway" \
#             --referenceUsername="postgres" \
#             --referencePassword="PZTcUieBZVvBuxkxfQJSRMeUFXZmdLFN" \
#             --url="jdbc:postgresql://junction.proxy.rlwy.net:33223/railway" \
#             --username="postgres" \
#             --password="oPgUTipUBnhQBqbWnRYpeaKCdNJKMXQp" \
#             --changeLogFile="/liquibase/changelog/changelog_diff.xml" \
#             diffChangeLog
#         displayName: 'Generate Diff Changelog'

#       # Step 2: List changelog files to check if it's created
#       - script: |
#           echo "Listing files in changelog directory:"
#           ls -l $(changelogDir)
#         displayName: 'List changelog directory'

#       # Step 3: Apply the changelog to the target database
#       - script: |
#           echo "Applying changelog to the target database..."
#           docker run --rm \
#             -v $(changelogDir):/liquibase/changelog \
#             $(liquibaseImage) \
#             --url="jdbc:postgresql://junction.proxy.rlwy.net:33223/railway" \
#             --username="postgres" \
#             --password="oPgUTipUBnhQBqbWnRYpeaKCdNJKMXQp" \
#             --changeLogFile="/liquibase/changelog/changelog_diff).xml" \
#             update
#         displayName: 'Apply Changelog to Database'

     
# trigger:
#   branches:
#     include:
#       - main

# pool:
#   name: Default

# variables:
#   liquibaseImage: liquibase/liquibase:4.30
#   # changelogDir: $(Build.SourcesDirectory)/changelog
#   # timestamp: $(Build.BuildId)  # Simplified timestamp for debugging

# jobs:
#   - job: Liquibase
#     displayName: 'Run Liquibase Changes'
#     pool:
#       vmImage: 'ubuntu-latest'

#     steps:
#       - task: Checkout@1
#         displayName: 'Checkout repository'
        
#       # Step 1: Setup changelog directory
#       - script: |
#           echo "Setting up Liquibase..."
#           # mkdir -p $(changelogDir)
#         displayName: 'Setup changelog directory'

#       # Step 2: Generate Diff Changelog
#       - script: |
#           echo "Running Liquibase to generate Diff Changelog..."
#           docker run --rm \
#             -v $(changelogDir):/liquibase/changelog \
#             $(liquibaseImage) \
#             --referenceUrl="jdbc:postgresql://junction.proxy.rlwy.net:38704/railway" \
#             --referenceUsername="postgres" \
#             --referencePassword="PZTcUieBZVvBuxkxfQJSRMeUFXZmdLFN" \
#             --url="jdbc:postgresql://junction.proxy.rlwy.net:33223/railway" \
#             --username="postgres" \
#             --password="oPgUTipUBnhQBqbWnRYpeaKCdNJKMXQp" \
#             --changeLogFile="/liquibase/changelog/changelog.xml" \
#             diffChangeLog
#         displayName: 'Generate Diff Changelog'

#       # Step 3: List files in changelog directory
#       - script: |
#           echo "Listing files in changelog directory:"
#           # ls -l $(changelogDir)
#         displayName: 'List changelog directory'


trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Your agent pool name
  demands:
    - agent.name -equals DART  # Ensure it uses the DART agent

jobs:
- job: ExampleJob
  displayName: 'Example job to use predefined variables'

  steps:
  - script: |
      echo "Pipeline ID: $(Build.BuildId)"
      echo "Source Branch: $(Build.SourceBranch)"
      echo "Repository Name: $(Build.Repository.Name)"
      echo "Agent Name: $(Agent.Name)"
      echo "Working Directory: $(System.DefaultWorkingDirectory)"
      echi "Source dIRECTORY: $(Build.SourcesDirectory)"
    displayName: 'Print predefined variables'

  - script: |
      echo "Current branch is $(Build.SourceBranch)" > $(System.DefaultWorkingDirectory)/branch_info.txt
    displayName: 'Create a file with branch information'
