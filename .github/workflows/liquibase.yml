# name: Liquibase CI/CD Pipeline

# on:
#   workflow_dispatch: # Allows manual triggering of the pipeline

# jobs:
#   liquibase-cicd:
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_USER: aravindreddynarreddy
#           POSTGRES_PASSWORD: password
#           POSTGRES_DB: staging_db
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd="pg_isready -U aravindreddynarreddy"
#           --health-interval=10s
#           --health-timeout=5s
#           --health-retries=3

#     steps:
#     # Checkout the repository
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     # Wait for PostgreSQL service to be ready
#     - name: Wait for PostgreSQL
#       run: |
#         for i in {1..30}; do
#           if pg_isready -h localhost -p 5432 -U aravindreddynarreddy; then
#             echo "PostgreSQL is ready!"
#             break
#           fi
#           echo "Waiting for PostgreSQL..."
#           sleep 2
#         done

#     # Run Liquibase diffChangeLog
#     - name: Run Liquibase to Create Diff ChangeLog
#       run: |
#         docker run --rm \
#           -v ${{ github.workspace }}:/liquibase/changelog \
#           liquibase/liquibase \
#           --referenceUrl="jdbc:postgresql://localhost:5432/prod_db" \
#           --referenceUsername="aravindreddynarreddy" \
#           --referencePassword="password" \
#           --url="jdbc:postgresql://localhost:5432/sandbox" \
#           --username="aravindreddynarreddy" \
#           --password="password" \
#           --changeLogFile="changelog_diff.xml" \
#           diffChangeLog

#     # Apply changes to the higher environment (sandbox_db)
#     - name: Apply Changes to Higher Environment
#       run: |
#         docker run --rm \
#           -v ${{ github.workspace }}:/liquibase/changelog \
#           liquibase/liquibase \
#           --url="jdbc:postgresql://localhost:5432/sandbox" \
#           --username="aravindreddynarreddy" \
#           --password="password" \
#           --changeLogFile="changelog_diff.xml" \
#           update

#     # Generate a new changelog file from the higher environment (sandbox_db)
#     - name: Generate New Changelog from Sandbox DB
#       run: |
#         docker run --rm \
#           -v ${{ github.workspace }}:/liquibase/changelog \
#           liquibase/liquibase \
#           --url="jdbc:postgresql://localhost:5432/sandbox" \
#           --username="aravindreddynarreddy" \
#           --password="password" \
#           --changeLogFile="changelog_prod_generated.xml" \
#           generateChangeLog

#     # Commit and push the new changelog file to GitHub
#     - name: Push Changelog to GitHub
#       run: |
#         git config --global user.name "reddyaravind"
#         git config --global user.email "reddyaravind838@gmail.com"
#         git add changelog_prod_generated.xml
#         git commit -m "Updated changelog"
#         git push
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



name: Liquibase CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  liquibase:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java 17
      uses: actions/setup-java@v2
      with:
        java-version: 17

    - name: Set environment variables for Liquibase
      run: |
        echo "STAGING_DB_URL=jdbc:postgresql://autorack.proxy.rlwy.net:58854/railway" >> $GITHUB_ENV
        echo "STAGING_DB_USERNAME=postgres" >> $GITHUB_ENV
        echo "STAGING_DB_PASSWORD=ThQNAfKRnLPpeLgJgDAkhQwVcEZfuHmH" >> $GITHUB_ENV
        echo "PRODUCTION_DB_URL=jdbc:postgresql://junction.proxy.rlwy.net:59848/railway" >> $GITHUB_ENV
        echo "PRODUCTION_DB_USERNAME=postgres" >> $GITHUB_ENV
        echo "PRODUCTION_DB_PASSWORD=oebjeJFqRLeFcIBAziEJQsMKeLhUeRFc" >> $GITHUB_ENV
        echo "CHANGELOG_PATH=changelog_diff.xml" >> $GITHUB_ENV
        echo "CHANGELOG_DIR=./changelog" >> $GITHUB_ENV

    - name: Create changelog directory
      run: |
        mkdir -p ${{ env.CHANGELOG_DIR }}

    - name: Generate Changelog from Staging DB
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/${{ env.CHANGELOG_DIR }}:/liquibase/changelog \
          liquibase/liquibase:4.30.0 \
          --url=${{ env.STAGING_DB_URL }} \
          --username=${{ env.STAGING_DB_USERNAME }} \
          --password=${{ env.STAGING_DB_PASSWORD }} \
          --changeLogFile=/liquibase/changelog/${{ env.CHANGELOG_PATH }} \
          generateChangeLog

    - name: Check if Changelog file exists
      run: |
        if [ ! -f ${{ github.workspace }}/${{ env.CHANGELOG_DIR }}/${{ env.CHANGELOG_PATH }} ]; then
          echo "Changelog file does not exist. Exiting."
          exit 1
        fi

    - name: Apply Changelog to Production DB
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/${{ env.CHANGELOG_DIR }}:/liquibase/changelog \
          liquibase/liquibase:4.30.0 \
          --url=${{ env.PRODUCTION_DB_URL }} \
          --username=${{ env.PRODUCTION_DB_USERNAME }} \
          --password=${{ env.PRODUCTION_DB_PASSWORD }} \
          --changeLogFile=/liquibase/changelog/${{ env.CHANGELOG_PATH }} \
          update

    - name: Send Success Notification
      run: |
        echo "Liquibase changes applied successfully to production database."
        # Add a step here to send a notification (e.g., email, Slack)
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Liquibase changes applied successfully."}' https://hooks.slack.com/services/...
        
    - name: Handle Failure Notification
      if: failure()
      run: |
        echo "Liquibase process failed."
        # Send failure notification
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Liquibase process failed."}' https://hooks.slack.com/services/...
